// Dependencies
// Types
import { FmIntegrationProviders } from "../../__generated__/graphql";

// Networking / URL Links
import {
  NavigationProperties,
  OriginAssociatedDomainLinks,
} from "../properties/NavigationProperties";
import { NetworkingInformation } from "../properties/NetworkingInformation";

// Formatting
import { uppercaseFirstLetter } from "../../utilities/formatting/textContentFormatting";

export const NotificationTemplates = {
  SuspiciousActivityDetected: {
    title: "Suspicious Activity Detected",
    message: "For your safety we've logged you out. Please sign in again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  SessionExpired: {
    title: "Session Expired",
    message: "Your session has expired, log back in to authenticate yourself.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  TasteProfileAutoGenerated: {
    title: "Taste Profile Auto-Generated",
    message:
      "Your auto-generated taste profile is available to use right now, but you can update it at any time in the settings menu via the taste profile quiz.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  TasteProfileCreated: {
    title: "Taste Profile Created",
    message: "Your new taste profile is now available to use.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  TasteProfileUpdated: {
    title: "Taste Profile Updated",
    message: "You've successfully updated your taste profile.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  TasteProfileError: {
    title: "Setting Taste Profile Failed",
    message:
      "An error was encountered while setting your taste profile, please try again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  SuccessfulPostDuplication: {
    title: "Experience Duplicated",
    message:
      "You've successfully duplicated your original experience and created a duplicate.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostDuplicationError: {
    title: "Experience Duplication Failed",
    message:
      "Duplication of this experience is not possible right now, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostDeletionError: {
    title: "Experience Deletion Failed",
    message:
      "Deletion of this experience is not possible right now, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostRestored: {
    title: "Experience Restored",
    message:
      "This experience has been restored and is no longer being deleted.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostPermanentlyDeleted: {
    title: "Experience Deleted",
    message: "This experience has been permanently deleted.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostCreated: {
    title: "New Experience Created",
    message: "Customize your experience and show it off to the world.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostCreationError: {
    title: "Experience Creation Failed",
    message:
      "Creating a new experience is not available at this time, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostUpdateError: {
    title: "Experience Update Failed",
    message:
      "Updating this experience is not possible at this time, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostVisible: {
    title: "Experience Moved To Mapped",
    message:
      "This experience is now visible to the public and has been moved to the 'Mapped' gallery for other users to see.",
    isError: false,
  } as SystemNotificationProtocol,

  PostHidden: {
    title: "Experience Moved To Hidden",
    message:
      "This experience is now hidden from other users and has been moved to the 'Hidden' gallery.",
    isError: false,
  } as SystemNotificationProtocol,

  PostMarkedForDeletion: {
    title: "Experience Moved To Deleted",
    message:
      "This experience will be deleted 30 days from now. Until then you can restore it, or delete it permanently.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  UserProfileUpdateError: {
    title: "Profile Update Failed",
    message:
      "This update to your profile could not be completed at this time, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  SignOutSuccessful: {
    title: "Signed Out",
    message:
      "You've been securely signed out and your session data has been cleared.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  LogInFailed: {
    title: "Log In Attempt Failed",
    message:
      "Make sure your credentials are valid and not connected to another account, then try again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  ImpersonationFailed: {
    title: "Impersonation Attempt Failed",
    message:
      "Make sure your roles are updated to perform this action, then try again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  LogInSuccessful: (firstName: string) => {
    return {
      title: `Welcome Back ${firstName} ðŸ‘‹`,
      message: "We missed you. Let's get back to mapping!",
      isError: false,
    } as SystemNotificationProtocol;
  },

  ImpersonationSuccessful: (firstName: string) => {
    return {
      title: `Now impersonating ${firstName}`,
      message: "Remember this is ACTUALLY modifying their data",
      isError: false,
    } as SystemNotificationProtocol;
  },

  FirstLogIn: (firstName: string) => {
    return {
      title: `Welcome to Foncii ${firstName} ðŸ¥‚`,
      message:
        "You can explore the community, or start importing and mapping your content.",
      isError: false,
    } as SystemNotificationProtocol;
  },

  AccountCreationFailed: {
    title: "Account Creation Failed",
    message:
      "We've encountered an issue while creating your new account. Please try again, and if this issue persists contact our support team for further assistance.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  AccountCreationNeeded: {
    title: "Account Not Found",
    message:
      "You'll need to first create an account before using provider to sign in",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PasswordResetEmailSent: (email: string) => {
    return {
      title: `Password Reset Email Sent`,
      message: `The email was sent to ${email}, check your inbox.`,
      isError: false,
    } as SystemNotificationProtocol;
  },

  PasswordResetEmailFailedToSend: {
    title: `Password Reset Email Failed`,
    message: "Please verify that your email is correct and try again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  AuthError: {
    title: "Authentication Error",
    message:
      "We've encountered an issue with your account, please sign in again. If this issue persists please contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  UnknownError: {
    title: "Unknown Error",
    message:
      "An unknown error was encountered. This may be due to a service disruption. Notify our support team if this issue persists.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostMediaUploadInProgress: {
    title: "Experience Media Upload In Progress",
    message:
      "Don't exit out of this session until your experience media is done uploading.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostMediaUploadSuccessful: {
    title: "Experience Media Upload Complete",
    message: "The media for your experience was uploaded successfully.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  PostMediaUploadError: {
    title: "Experience Media Upload Failed",
    message:
      "The media for your experience could not be uploaded at this time, please try again.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  PostImportSuccessful: (
    integrationProvider: FmIntegrationProviders
  ): SystemNotificationProtocol => {
    const formattedProviderName = uppercaseFirstLetter(
      integrationProvider.toString().toLowerCase()
    );

    return {
      title: "Media Imported",
      message: `Your media from ${formattedProviderName} was imported successfully. Tap here to navigate to your map.`,
      isError: false,
      link: NavigationProperties.userGalleryPageLink(),
    } as SystemNotificationProtocol;
  },

  PostImportFailed: (
    integrationProvider: FmIntegrationProviders
  ): SystemNotificationProtocol => {
    const formattedProviderName = uppercaseFirstLetter(
      integrationProvider.toString().toLowerCase()
    );

    return {
      title: "Media Import Error",
      message: `We could not import your media from ${formattedProviderName} at this time, try again later or contact our support team for further assistance.`,
      isError: true,
      link: undefined,
    } as SystemNotificationProtocol;
  },

  UserPostFetchError: {
    title: "Experience Fetch Error",
    message:
      "An error was encountered while fetching user experiences. Refresh the page and or notify us if this issue persists.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  FonciiRestaurantSaveError: {
    title: "Save Error",
    message:
      "Saving this experience is not possible at this time, please try again shortly.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  FonciiRestaurantsFetchError: {
    title: "Explore Fetch Error",
    message:
      "An error was encountered while fetching restaurants. Refresh the page and or notify us if this issue persists.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  StagingAuthMaxAttemptWarning: {
    title: "Maximum Number of Auth Attempts Exceeded",
    message: `This is a secure service. If you're an unauthorized party, please navigate to our production site at ${NetworkingInformation.prodDomain} Click here to be redirected.`,
    isError: true,
    link: OriginAssociatedDomainLinks.FonciiMapsProductionDomainLink(),
  } as SystemNotificationProtocol,

  StagingAuthSuccessful: {
    title: "Access Request Authorized",
    message:
      "Please note that access to this environment will be revoked upon sign out and or clearing of this application's storage data.",
    isError: false,
  } as SystemNotificationProtocol,

  /**
   * @param customTitle -> The URL of the link copied, or any custom title, default is 'Link Copied'
   *
   * @returns -> Notification template for the link copy notification
   */
  LinkCopied: (customTitle?: string): SystemNotificationProtocol => {
    return {
      title: customTitle ?? "Link Copied",
      message: "A share sheet link has been copied to your clipboard.",
      isError: false,
    } as SystemNotificationProtocol;
  },

  IntegrationConnectionSuccessful: (
    integrationProvider: FmIntegrationProviders
  ): SystemNotificationProtocol => {
    const formattedProviderName = uppercaseFirstLetter(
      integrationProvider.toString().toLowerCase()
    );

    return {
      title: `${formattedProviderName} Integration Connected`,
      message:
        "You can update and or remove this connection at any time. Navigate back to the menu to start importing your media.",
      isError: false,
    } as SystemNotificationProtocol;
  },

  IntegrationConnectionFailed: (
    integrationProvider: FmIntegrationProviders
  ): SystemNotificationProtocol => {
    const formattedProviderName = uppercaseFirstLetter(
      integrationProvider.toString().toLowerCase()
    );

    return {
      title: `${formattedProviderName} Integration Connection Failed`,
      message:
        "Connecting to this integration was not successful. Please try again or contact us for further assistance if issues persist.",
      isError: true,
    } as SystemNotificationProtocol;
  },

  IntegrationCredentialUpdateError: {
    title: "Integration Connection Update Failed",
    message:
      "Updating this integration connection is not possible at this time, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  IntegrationCredentialRemovalSuccessful: {
    title: "Integration Connection Removed",
    message: "Your integration connection has been successfully removed.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  IntegrationCredentialRemovalFailed: {
    title: "Integration Connection Revocation Failed",
    message:
      "We couldn't revoke your integration connection at this, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  IntegrationCredentialRevocationSuccessful: {
    title: "Integration Connections Removed",
    message:
      "All of your integration connections have been successfully removed.",
    isError: false,
    link: undefined,
  } as SystemNotificationProtocol,

  IntegrationCredentialRevocationFailed: {
    title: "Integration Connection Revocation Failed",
    message:
      "We couldn't revoke your existing integration connections at this time, please try again shortly. If issues persist contact our support team.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,

  RestaurantAggregationFailed: {
    title: "Restaurant Aggregation Failed",
    message:
      "We couldn't find that restaurant at this time, please try again shortly.",
    isError: true,
    link: undefined,
  } as SystemNotificationProtocol,
};
