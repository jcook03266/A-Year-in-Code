// Dependencies
// GraphQL Document Node
import gql from "graphql-tag";

const typeDef = gql`
  """
  Foncii Maps User
  """
  type FMUser implements UserAccount & Identifiable & Updatable {
    # Interface Implementations
    id: ID!
    firstName: String!
    lastName: String!
    username: String!
    phoneNumber: String
    email: String!
    authProviders: [AuthProviders!]!
    profilePictureURL: String
    """
    False if a person still needs to claim an autogenerated account, true otherwise.
    Used to trigger the onboarding flow for new users that are just getting access to their unclaimed account.
    """
    isClaimed: Boolean!
    creationDate: String!
    lastUpdated: String!
    referralCode: String!
    lastLogin: UserLogin!
    lastSignOut: String
    isLoggedIn: Boolean!
    role: UserRoles!

    # Foncii Maps User Fields
    mapName: String!

    """
    [Computed] User's primary taste profile's data (if they have a current taste profile or any taste profile for that matter)
    Null until they create one / if they've deleted all of their existing taste profiles
    """
    primaryTasteProfile: TasteProfile
    """
    [Computed] All of the target user's taste profiles as edges (an array)
    """
    tasteProfileEdges: [TasteProfile!]!

    """
    [Computed] Score from 0 - 100 that measures the similarity between the primary user and the
    secondary user in terms of their taste profiles using the generated embeddings that reside within
    the taste profile's data model as well as in the database.
    """
    tasteProfileSimilarityScore(userToCompare: ID): Float

    """
    [Computed] various profile tasks for the user to complete. These are computed and resolved at request
    time and aren't tied to an updatable state in the DB because some of these tasks can be undone by the user
    so it's important to keep track of their dynamic states without overcomplicating other services and parts of the user ecosystem.
    """
    profileTasks: [ProfileTask!]!
  }

  type FMIntegrationCredential implements Identifiable & Updatable & Expirable {
    # Interface Implementations
    id: ID!
    creationDate: String!
    lastUpdated: String!
    staleDate: String!

    # Foncii Maps Integration Credential Fields
    """
    Foncii User ID used to fetch this integration credential
    """
    userID: String!
    provider: FMIntegrationProviders!
    """
    App-scoped user identifier
    """
    appUID: String!
    """
    User's platform specific username provided by the integration (if any)
    """
    appUsername: String
    """
    Some expirable access token, either short lived or long lived depending on the integration
    """
    accessToken: String!
    """
    When enabled the auth token is automatically refreshed when the user starts a new session,
    (if the token needs to be refreshed in the first place). Default is true.
    This is so we don't waste operations on users that don't log in for extended periods of time, plus
    it's bad practice to persist auth tokens indefinitely without some input / interaction from the user.
    """
    autoRefresh: Boolean!

    """
    The timestamp when the user's last import occurred. This is undefined when
    the credential is first provisioned, and updated upon successful imports.
    ISO-8601 formatted date string
    """
    lastImport: String

    # Computed Properties
    """
    True if the credential expires within the next 3 days or so, false otherwise.
    Three days is our arbitrary grace period for the user to manually refresh the credential
    or mark it as auto-refreshable, but this can change as needed.
    """
    expiresSoon: Boolean!

    """
    True the credential is now older than its expiration date and cannot be refreshed. The user must
    now reconnect the credential in order to use it again, they can also remove it from their existing
    credentials by revoking it from the client side in case they no longer need to use the integration.
    """
    expired: Boolean!

    """
    True if the credential is old enough to be refreshed (~ 24 hours or older),
    false otherwise.
    """
    canRefresh: Boolean!
  }

  type UserReferral implements Identifiable & Updatable {
    # Interface Implementations
    id: ID!
    creationDate: String!
    lastUpdated: String!

    # User Referral Fields
    referrerCode: String!
    refereeCode: String!
  }

  """
  User Taste Profile
  """ # https://docs.google.com/document/d/1B136thFU-OWu2WB1gdEJeBVhPZldsCoqJ9_IHrUaudU/edit
  type # Note: For the multiple choice questions, if no answer is selected then an empty array is used
  # For the single answer questions, if no answer is selected then null is used as well, except for booleans where false is the default answer
  TasteProfile implements Identifiable & Updatable {
    # Interface Implementations
    """
    UID of this taste profile, a single user can have multiple taste profiles
    associated with their account via the userID field
    """
    id: ID!
    """
    ID of the user this taste profile belongs to, before this was the id, but this will allow for the possibility of switching taste profiles for users by allowing multiple taste profiles for a single user
    """
    userID: String!
    creationDate: String!
    lastUpdated: String!

    # Taste Profile Fields
    """
    0 - 2 | Optional integer from 0 - 2 - default value if undefined if no value is given
    """
    spicePreferenceLevel: Int
    """
    0 - 2 | ~
    """
    adventureLevel: Int
    """
    0 - 2 | ~
    """
    distancePreferenceLevel: Int
    """
    0 - 3 | Optional integer from 0 - 3 - default value is undefined if no value is given
    """
    diningPurpose: Int
    """
    0 - 3 | ~
    """
    ambiancePreference: Int
    """
    0 - 3 | Optional integer from 0 - 3 - default value if undefined if no value is given, Option 4 aka 'Non-alcoholic beverages only' indicates a non-alcoholic beverage preference i.e no alcohol, the others ~ yes alcohol
    """
    drinkPreference: Int
    """
    A set of unique cuisine IDs, (any duplicates are removed)
    """
    preferredCuisines: [ID!]
    """
    A set of unique ID strings associated with the dietary restrictions that the user has - default value is an empty array if no value is given
    """
    dietaryRestrictions: [ID!]
    """
    0 - 3 | Optional integer from 0 - 3 - default value is undefined if no value is given | 0.) 4 ($$$$) and below ($$$$), ($$$), ($$), ($) 1.) 3 ($$$) and below ($$$), ($$), ($) 2.) ($$) and below ($$), ($), 1.) ($) and below ($)
    """
    preferredPriceRange: Int
  }
`;

export default typeDef;
