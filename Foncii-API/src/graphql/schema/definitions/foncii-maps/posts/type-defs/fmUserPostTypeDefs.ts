// Dependencies
// GraphQL Document Node
import gql from "graphql-tag";

const typeDef = gql`
  """
  Foncii Maps User Post
  """
  type FMUserPost implements Identifiable & Updatable {
    # Interfaces
    id: ID!
    creationDate: String!
    lastUpdated: String!

    # Foncii Maps User Post Fields
    """
    ID of the user that created the post (Author / Creator)
    """
    userID: String!
    """
    Data source is optional as posts can be imported and created manually
    """
    dataSource: PostDataSource
    """
    User rating + notes + custom tags
    """
    customUserProperties: CustomUserPostProperties!

    """
    True by default since newly imported posts lack restaurant data
    """
    isHidden: Boolean!
    """
    True if marked as favorited by the author, false otherwise
    """
    isFavorited: Boolean!

    """
    Optional Foncii hosted media, updated after the post is created and the corresponding media is uploaded Foncii's storage containers
    """
    media: FMUserPostMedia
    """
    ~ Main media field. Only populated if the post is a carousel
    """
    secondaryMedia: [FMUserPostMedia!]
    """
    Optional identifier for identifying which post this post was copied from (if it's a copy), if it's not a copy this field remains undefined
    """
    parentPostID: String

    """
    [Optional] True if the post should be deleted asynchronously, null otherwise
    """
    deletionPending: Boolean

    """
    [Optional] UTC time in MS indicating the date at midnight (UTC) the post should be deleted, null if the post isn't marked for deletion
    """
    scheduledDeletionTimestamp: Float

    """
    [Computed] True if parent post ID is defined. Simplifies the process of checking if a post is a child post or not on the client side
    """
    isChildPost: Boolean!
    """
    [Computed] True if the post is a video, false otherwise.
    """
    mediaIsVideo: Boolean!
    """
    [Denormalized] Fetched using 'userID' field
    """
    creator: FMUser!
    """
    [Denormalized] Fetched using 'fonciiRestaurantID' field, optional because restaurants are associated with posts only after the post is created
    """
    restaurant: Restaurant
    """
    [Computed] An extension of the 'restaurant' field with reservation times, articles, influencer insights etc as specified by the 'userPersonalizationInput' input
    """
    fonciiRestaurant: FonciiRestaurant
  }

  """
  Modular media encapsulation for Foncii Maps Posts, allows for video and image media resource locators
  to be stored without breaking changes. Also allows for media edges to also be stored if supported later on.
  """
  type FMUserPostMedia {
    """
    URL pointing towards the hosted media file.
    """
    mediaURL: String
    """
    Thumbnail image for video media
    """
    videoMediaThumbnailURL: String
    mediaType: PostMediaTypes
  }

  """
  Modular data source populated by Foncii Maps Integrations that aggregate social media posts from external sources.
  """
  type PostDataSource implements Creatable {
    """
    Source Identifier
    """
    provider: FMIntegrationProviders!
    """
    The real non-app-scoped UID of the post's data source. This is the same UID you'd see when viewing the data source on the
    provider's production site. This is either populated when scraping some data provider instead of directly connecting to
    their dedicated integration API service. Or when parsing the permalink of newly imported posts from a dedicated integration. The
    purpose of this field is to prevent duplicate data from being inserted into the database by having a permanent source of truth alongside
    the existing sourceUID field which is used to compare integration imported posts to other integration imported posts; now both
    scraped and imported posts can now be compared and deduplicated freely.
    """
    liveSourceUID: String
    """
    The app-scoped (Facebook) or global unique identifier (UID) of the post directly from the original data source
    """
    sourceUID: String!
    """
    Simple description of the post generated by the user, optional b/c some sources might not support captions or they may be optional there as well
    """
    caption: String
    """
    Non-expirable link to the original post, optional in the case of Instagram where posts include Copyrighted media / audio
    """
    permalink: String
    """
    ISO-8601 formatted original creation date of the post sourced from the data source.
    """
    creationDate: String!

    """
    Third-party media source, expirable in 1-2 days if Instagram is the source provider.
    Any media sourced from here must be persisted to our storage containers immediately.
    """
    media: FMUserPostMedia!

    """
    Secondary media / media edges. Populated in the case of carousel post types
    Any media sourced from here must be persisted to our storage containers immediately,
    expirable in 1-2 days if Instagram is the source provider.
    """
    secondaryMedia: [FMUserPostMedia!]
  }

  """
  User defined properties attributed to this post
  """
  type CustomUserPostProperties {
    """
    A user rating from 1 - 5, rating their experience at the establishment associated with the post
    """
    rating: Float
    """
    Notes defined by the user. Also auto-filled by post captions from imported user posts from Instagram and other
    applicable sources if available.
    """
    notes: String
    """
    User defined tags that best describe the establishment as well as their unique experience.
    Auto-filled from imported posts if the post has a caption with hashtags
    """
    categories: [String!]
  }

  type LocalInfluencerLeaderboardEntry {
    category: InfluencerLeaderboardCategory!
    user: FMUser!
    """
    The total amount of restaurants the influencer has visited in
    the given search area
    """
    totalLocalRestaurantsVisited: Int! @cacheControl(maxAge: 600)
  }
`;

export default typeDef;
